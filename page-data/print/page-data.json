{"componentChunkName":"component---node-modules-gatsby-theme-mdx-deck-src-templates-deck-js","path":"/print","result":{"data":{"deck":{"id":"b671ae91-ba27-5924-95b4-42be71d70820","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Image = makeShortcode(\"Image\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Introduction To Git\"), mdx(\"p\", null, \"Sebastian Csar\"), mdx(\"hr\", null), mdx(\"h1\", null, \"What and Why Version Control?\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Keep track of changes to the code\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Revert bad changes\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Allow multiple people to work in parallel more easily\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Git is but one of many \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"distributed\"), \" version control systems\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Mercurial\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"svn\")))), mdx(\"hr\", null), mdx(\"h1\", null, \"Key Definitions\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Repository\"), \" - a git \\\"project\\\"\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"has all the \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"current\"), \" files\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"but also all the \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"history\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"b\", null, \"Branch\"), \" - a split from the \\\"main line\\\" so you can make changes without messing with the main line\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"b\", null, \"main/master\"), \" - (by convention) the name for the \\\"main line\\\" branch\")), mdx(\"hr\", null), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"commit\"), \" (n./v.) - a unit of change/the act of making that change\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"merge\"), \" - bringing the changes from one branch into another\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"rebase\"), \" - relocating where a branch splits from its parent\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Branches\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"git checkout <id>\"), \" moves \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"HEAD\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<id>\"), \" (which can be a branch name, a commit hash, a tag, ...)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"creating a branch: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"git checkout -b <branch name>\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"short for \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"git branch <branch name>\"), \" + \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"git checkout <branch name>\"))))), mdx(\"hr\", null), mdx(\"h2\", null, \"Making a commit.\"), mdx(Image, {\n    src: status,\n    style: {\n      maxWidth: '75%',\n      maxHeight: '75%',\n      objectFit: 'contain',\n      backgroundSize: 'contain'\n    },\n    alt: \"foo\",\n    mdxType: \"Image\"\n  }), mdx(ImageText, {\n    mdxType: \"ImageText\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \" ~/dotfiles \\uE0B0 \\uE0A0 setup_scripts \\uE0B0 git status\\n On branch setup_scripts\\n Your branch is up to date with 'origin/setup_scripts'.\\n\\n Untracked files:\\n   (use \\\"git add <file>...\\\" to include in what will be committed)\\n           git_aliases/\\n                   nvim/.config/nvim/.netrwhist\\n\\n                   nothing added to commit but untracked files present (use \\\"git add\\\" to track)\\n\"))), mdx(\"hr\", null), mdx(\"h2\", null, \"Making a commit\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"git status\"), \": see what files have changed\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"git add\"), \": stage each file that you want to commit\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"tip: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"git add -p my_file.py\"), \" will show you all changes individually and ask if you want to stage them\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"git commit\"), \": make the commit\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"shortcut: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"git commit -m \\\"The commit message\\\"\"))))), mdx(\"hr\", null), mdx(\"h1\", null, \"commit\"), mdx(Image, {\n    src: commit,\n    style: {\n      maxWith: '75%',\n      maxHeight: '75%',\n      backgroundSize: 'contain'\n    },\n    mdxType: \"Image\"\n  }), mdx(ImageText, {\n    mdxType: \"ImageText\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Add .vscode to .gitignore\\n\\n# Please enter the commit message for your changes. Lines starting\\n# with '#' will be ignored, and an empty message aborts the commit.\\n#\\n# On branch setup_scripts\\n# Your branch is up to date with 'origin/setup_scripts'.\\n#\\n# Changes to be committed:\\n#       new file:   .gitignore\\n#\\n# Untracked files:\\n#       git_aliases/\\n#\\n\"))), mdx(\"hr\", null), mdx(\"h1\", null, \"A quick vim digression\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"git tends to default to using vim as its editor for commit messages\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"To commit:\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"i\"), \" (enter insert mode)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"write your commit message\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<esc>\"), \" (back to command mode)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \":w\"), \" (save)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \":q\"), \" (quit)\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"To set a different editor:\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"git config --global core.editor nano\\n\")), mdx(\"hr\", null), mdx(\"h1\", null, \"What about merging?\"), mdx(\"p\", null, \"Merge the branch featureA into main:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"git checkout main # make sure you're in main to start\\ngit merge featureA\\n\")), mdx(\"p\", null, \"There are two scenarios:\"), mdx(\"ul\", null, mdx(\"li\", null, \"a fast-forward merge--your commits stack on top of the main branch\"), mdx(\"li\", null, \"a three-way merge\")), mdx(\"hr\", null), mdx(\"h1\", null, \"Fast-Forward Merges\"), mdx(TwoColumn, {\n    mdxType: \"TwoColumn\"\n  }, mdx(Column, {\n    mdxType: \"Column\"\n  }, mdx(\"h2\", null, \"before\"), mdx(FFMergeBefore, {\n    mdxType: \"FFMergeBefore\"\n  }), mdx(ImageText, {\n    mdxType: \"ImageText\"\n  }, \"We have two branches: `main` and `some_branch`. There are three commits on `main` before `some branch` splits off and makes two commits with messages \\\"start doing something\\\" and \\\"finish it up\\\"\")), mdx(Column, {\n    mdxType: \"Column\"\n  }, mdx(\"h2\", null, \"after\"), mdx(FFMergeAfter, {\n    mdxType: \"FFMergeAfter\"\n  }), mdx(ImageText, {\n    mdxType: \"ImageText\"\n  }, \"We merge `some_branch` into `main`. `some_branch` no longer exists and `main` is the only branch in the image. It contains the same three commits it did before, _plus_ the two from `some_branch`.\"))), mdx(\"hr\", null), mdx(\"h1\", null, \"Three-Way Merges\"), mdx(TwoColumn, {\n    mdxType: \"TwoColumn\"\n  }, mdx(Column, {\n    mdxType: \"Column\"\n  }, mdx(\"h2\", null, \"before\"), mdx(MergeBefore, {\n    mdxType: \"MergeBefore\"\n  }), mdx(ImageText, {\n    mdxType: \"ImageText\"\n  }, \"In this example, we again have `some_branch` and `main` which diverge after three commits. We have the same two commits on `some_branch`: \\\"start doing something\\\" and \\\"finish it up\\\". However, `main` also has an additional commit with message \\\"main advances\\\" _after_ `some_branch` split off.\")), mdx(Column, {\n    mdxType: \"Column\"\n  }, mdx(\"h2\", null, \"after\"), mdx(MergeAfter, {\n    mdxType: \"MergeAfter\"\n  }), mdx(ImageText, {\n    mdxType: \"ImageText\"\n  }, \"We again merge `some_branch` into `main`. Both `some_graph` and `main` remain in the image. The tip of `main` is now at the \\\"merge commit\\\"--a commit created by git with message \\\"Merge branch some_branch\\\".\"))), mdx(\"hr\", null), mdx(\"h1\", null, \"Merge Conflicts\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"$ git diff main setup_scripts --name-only\\n.gitignore\\nsetup.sh\\n$ git diff main conflict_demo --name-only\\n.gitignore\\nsetup.sh\\n\")), mdx(\"p\", null, \"What happens when I try to merge setup_scripts into conflict_demo?\", mdx(\"br\", null)), mdx(Image, {\n    src: conflict,\n    style: {\n      maxWidth: '75%',\n      backgroundSize: 'contain'\n    },\n    mdxType: \"Image\"\n  }), mdx(ImageText, {\n    mdxType: \"ImageText\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \" ~/dotfiles \\uE0B0 \\uE0A0 conflict_demo \\uE0B0 git merge setup_scripts\\n CONFLICT (add/add): Merge conflict in setup.sh\\n Auto-merging setup.sh\\n Automatic merge failed; fix conflicts and then commit the result.\\n\"))), mdx(\"hr\", null), mdx(DefaultLayout, {\n    mdxType: \"DefaultLayout\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"<<<<<<< HEAD\\n# first, let's start by installing stow\\n\\nsudo apt-get install stow\\n\\n# get nvim\\nmkdir -p $HOME/bin\\ncd $HOME/bin\\ncurl -LO https://github.com/neovim/neovim/releases/latest/download/nvim.appimage\\nchmod u+x nvim.appimage\\n=======\\n#!/usr/bin/env bash\\n\\nif ! command stow &> /dev/null\\nthen\\necho \\\"Stow not found -- go download it from http://ftpmirror.gnu.org/stow/\\\"\\nexit\\nfi\\n\\n# install vimplug for nvim\\nsh -c 'curl -fLo \\\"${XDG_DATA_HOME:-$HOME/.local/share}\\\"/nvim/site/autoload/plug.vim --create-dirs \\\\\\nhttps://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'\\n>>>>>>> setup_scripts\\n\"))), mdx(\"hr\", null), mdx(\"h1\", null, \"Resolving Conflicts\"), mdx(\"p\", null, \"For each conflicted file:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"open the file and edit it, taking the lines from the version you want\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"caution: they may mix together in a way that results in broken code\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"stage the file (\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"git add\"), \")\\nThen, when you're done, \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"git commit\"), \".\")), mdx(\"hr\", null), mdx(\"h1\", null, \"More on confilcts...\"), mdx(\"ul\", null, mdx(\"li\", null, \"Editors often have a merge tool built to help\"), mdx(\"li\", null, \"Github also allows you to resolve conflicts in the pull-request UI\")), mdx(\"hr\", null), mdx(\"h1\", null, \".gitignore\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"There's a special file called \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \".gitignore\"), \" which contains a list of files/directories that you want git to ignore\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"These are usually things like files generated by your text editor/IDE or generated code\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Github will offer to make one for you or you can google for a \\\"standard\\\" list for the language you're using\")), mdx(\"hr\", null), mdx(\"h1\", null, \"Links and References\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://guides.github.com/introduction/git-handbook/\"\n  }, \"Github Git Guide\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://rogerdudler.github.io/git-guide/\"\n  }, \"git - the simple guide\"), \" -- with \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://rogerdudler.github.io/git-guide/files/git_cheat_sheet.pdf\"\n  }, \"cheatsheet\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://git-scm.com/docs/gittutorial\"\n  }, \"official tutorial\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://web.mit.edu/6.005/www/fa14/tutorial/git/config.html\"\n  }, \"MIT 6.005 tutorial on editor settings\"))));\n}\n;\nMDXContent.isMDXComponent = true;","title":"Introduction To Git"}},"pageContext":{"id":"b671ae91-ba27-5924-95b4-42be71d70820","slug":"/black-wings-git-tutorial","title":"Introduction To Git"}},"staticQueryHashes":[]}